###todos os modelos ######
dados <- info_curso_biologia_atualizado_tdsBinarizacao_atualizado
#####SEPARANDO TREINO E TESTE #########
library(caret)
set.seed(550)
inTraining <- createDataPartition(dados$BinarioMaiorMedia, p = .70, list = FALSE) ###mudar
treinamento <- dados[ inTraining,]
teste  <- dados[-inTraining,]
table(teste$BinarioMaiorMedia) #mudar

#####VALIDAÃ‡AO CRUZADA ###########
fitControl2 <- trainControl(
  method = "repeatedcv",
  number = 10,
  repeats = 10)

####REGRESSSAO LOGISTICA ######
set.seed(550)
###mudar
gbmFit9 <- train(factor(BinarioMaiorMedia) ~ indegre3 + outdegre3 + degre3 + closenes3 + betwenes3 +
                 indegre4 + outdegre4 + degre4 + closenes4 + betwenes4,
                 data = treinamento, 
                 method = 'glm',
                 family = 'binomial',
                 trControl = fitControl2)

classificacaoProb2 <- predict(gbmFit9,teste)
table(classificacaoProb2)
MatrizDeConfusao <- confusionMatrix(table(data=classificacaoProb2,reference=teste$BinarioMaiorMedia),positive = '1')
MatrizDeConfusao



####RANDOM FOREST ####

library('randomForest')
set.seed(550)
modeloForest<-randomForest(BinarioMaiorMedia ~ indegre3 + outdegre3 + degre3 + closenes3 + betwenes3 +
                             indegre4 + outdegre4 + degre4 + closenes4 + betwenes4 ,family=binomial,data=treinamento)

classificacaoProb <- predict(modeloForest,teste)
classificacaoModelo <- ifelse(classificacaoProb > 0.50,1,0)
table(classificacaoModelo)
MatrizDeConfusao <- confusionMatrix(table(data=classificacaoModelo,reference=teste$BinarioMaiorMedia),positive = '1')
MatrizDeConfusao

####

####XGBOOST ####
library('dplyr')
library('magrittr')
library('xgboost')
library('Matrix')
library(caret)
trainm <- sparse.model.matrix(BinarioMaiorMedia ~ indegre4 + outdegre4  
                              + indegre3 + outdegre3, data = treinamento)
train_label <- treinamento$BinarioMaiorMedia
train_matrix <- xgb.DMatrix(data = as.matrix(trainm), label = train_label)


testm <- sparse.model.matrix(BinarioMaiorMedia ~indegre4 + outdegre4
                             + indegre3 + outdegre3, data = teste)
test_label <- teste$BinarioMaiorMedia
test_matrix <- xgb.DMatrix(data = as.matrix(testm), label = test_label)


bst_model2 <- xgboost(data = train_matrix, label = train_label, max_depth = 2,
                     eta = 0.5, nthread = 2, nrounds = 100 , objective = "binary:logistic")


classificacaoProb2 <- predict(bst_model2, newdata = test_matrix) #test_matrix PARA XGBOOST
classificacaoModelo <- ifelse(classificacaoProb2 > 0.50,1,0)
table(classificacaoModelo)
MatrizDeConfusao <- confusionMatrix(table(data=classificacaoModelo,reference=teste$BinarioMaiorMedia),positive = '1')
MatrizDeConfusao
